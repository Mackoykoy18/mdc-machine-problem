<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <munit:config name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:implementation.xml"/>
    </spring:beans>
    <munit:test name="implementation-test-suite-getUserFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Database response Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get User']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[{'gender' :'M', 'date_registered' : 1546473818, 'user_name' : 'johnmack', 'full_name' : 'John Mack Samson','birthday' : 662256218} , {'gender' :'M', 'date_registered' : 1546473818, 'user_name' : 'juvy', 'full_name' : 'Juvy Dela Rosa','birthday' : 662256218}]]"/>
        </mock:when>
        <set-variable variableName="userName" value="#['johnmack']" doc:name="Variable"/>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="client_id" value="#['johnmacksamson18']"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="getUserFlow" doc:name="Flow-ref to getUserFlow"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <munit:assert-not-null message="Payload empty!!!!" doc:name="Assert Not Null Payload"/>
        <munit:assert-true condition="#[message.inboundProperties.client_id=='johnmacksamson18']" doc:name="Assert True"/>
    </munit:test>
    <munit:test name="implementation-test-suite-getUsersFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Database response Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get User']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[{'gender' :'M', 'date_registered' : 1546473818, 'user_name' : 'johnmack', 'full_name' : 'John Mack Samson','birthday' : 662256218}, {'gender' :'F', 'date_registered' : 1547078400, 'user_name' : 'juvy', 'full_name' : 'Juvy Dela Rosa','birthday' : 578793600}]]"/>
        </mock:when>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="client_id" value="#['johnmacksamson18']"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="getUsersFlow" doc:name="Flow-ref to getUsersFlow"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
        <munit:assert-true condition="#[message.inboundProperties.client_id=='johnmacksamson18']" doc:name="Assert True"/>
    </munit:test>
</mule>
